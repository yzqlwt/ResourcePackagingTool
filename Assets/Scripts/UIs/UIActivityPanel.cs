//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using Newtonsoft.Json;
    using QF.Master;
    using QuickTools;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.Networking;
    using UnityEngine.UI;


    public class ActivityData
    {
        public int id;
        public string name;
    }

    public class UIActivityPanelData : QFramework.UIPanelData
    {
    }
    
    public partial class UIActivityPanel : QFramework.UIPanel
    {
        private string Version = "0.0.2";
        private Dictionary<string, string> machines = new Dictionary<string, string>();
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIActivityPanelData ?? new UIActivityPanelData();
            // please add init code here
            Guide.onClick.AddListener(GuideToTexturePackage);
            Start.onClick.AddListener(StartClick);
            ActivityOptions.GetComponent<Dropdown>().onValueChanged.AddListener(ActivityOptionChanged);
            StartCoroutine(GetActivityList(1));
            ActivityOptions.GetComponent<Dropdown>().ClearOptions();
            ActivityOptions.GetComponent<Dropdown>().AddOptions(new List<string>
                    {
                        "请先选择互动"
                    });
        }




        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }


        private void StartClick()
        {
            
            var text = ActivityOptions.GetComponent<Dropdown>().captionText.text;
            if (text.IndexOf("-") > -1)
            {
                var id = text.Split(':')[1];
                var index = text.Split(' ')[0];
                int tmp = 0;
                if (int.TryParse(id, out tmp)) {
                    UIMgr.OpenPanel("UIResourcePanel", UILevel.Common, new UIResourcePanelData()
                    {
                        activityIndex = index,
                        id = id
                    });
                    UIMgr.ClosePanel("UIActivityPanel");
                }

            }
            
        }

        private void DownloadNewVersion()
        {
            Application.OpenURL("https://github.com/yzqlwt/ResourcePackagingTool/releases");
        }
        private void ActivityOptionChanged(int arg0)
        {
            var activityOptions = ActivityOptions.GetComponent<Dropdown>();
            Debug.Log(string.Format("互动选择：{0}", activityOptions.captionText.text));
        }
        private void GuideToTexturePackage()
        {
            Application.OpenURL("https://imgchr.com/i/uYL7Ss");
            var command = Application.streamingAssetsPath + "/bin/TexturePackerGUI.exe";
            var argu = "";
            Utils.processCommand(command, argu);
        }
        private void RefreshList()
        {
            StartCoroutine(GetActivityList(1));
        }

        IEnumerator GetActivityList(int pageNumber = 1)
        {
            var start = 12 * (pageNumber - 1);
            var uri = "https://gate.mongomath.com:8443/admin-course/activityTemplates?count=20&start=" + start;
            var Auth = PlayerPrefs.GetString("access_token");
            using (UnityWebRequest webRequest = UnityWebRequest.Get(uri))
            {
                webRequest.SetRequestHeader("Authorization", Auth);
                webRequest.SetRequestHeader("Content-Type", "application/json");
                // Request and wait for the desired page.
                yield return webRequest.SendWebRequest();

                if (webRequest.isNetworkError)
                {
                    Debug.Log(": Error: " + webRequest.error);
                }
                else
                {
                    //{
                    //  "id": 92,
                    //  "name": "83-规律连线",
                    //  "description": null,
                    //  "game_id": "g83",
                    //  "remark": null,
                    //  "notice": null,
                    //  "phonics_description": null
                    //}
                    dynamic jResults = JsonConvert.DeserializeObject(webRequest.downloadHandler.text);
                    List<string> activities = new List<string>();
                    foreach (var activity in jResults.targets)
                    {
                        var name = (string)activity.name;
                        var id = (string)activity.id;
                        activities.Add(name+" id:"+ id);
                    }

                    ActivityOptions.GetComponent<Dropdown>().AddOptions(activities);
                }
            }
        }
        IEnumerator GetNeedUpdate()
        {
            var uri = "http://www.yzqlwt.com:8080/activity/version?version=" + Version;
            using (UnityWebRequest webRequest = UnityWebRequest.Get(uri))
            {
                yield return webRequest.SendWebRequest();
                if (webRequest.isNetworkError)
                {
                    Debug.Log(": Error: " + webRequest.error);
                }
                else
                {
                    var text = webRequest.downloadHandler.text;
                    bool _b = Convert.ToBoolean(text);
                    if (_b)
                    {
                        Update.gameObject.SetActive(true);
                    }
                    else
                    {
                        Update.gameObject.SetActive(false);
                    }
                }
            }
        }
    }
}
