//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using QF.Master;
    using QuickTools;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.Networking;
    using UnityEngine.UI;


    
    
    public class UIActivityPanelData : QFramework.UIPanelData
    {
    }
    
    public partial class UIActivityPanel : QFramework.UIPanel
    {
        private string Version = "0.0.2";
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIActivityPanelData ?? new UIActivityPanelData();
            // please add init code here
            AddActivity.onClick.AddListener(AddActivityClick);
            ModifyActivity.onClick.AddListener(ModifyActivityClick);
            Guide.onClick.AddListener(GuideToTexturePackage);
            Refresh.onClick.AddListener(RefreshList);
            Start.onClick.AddListener(StartClick);
            Update.onClick.AddListener(DownloadNewVersion);
            ActivityOptions.GetComponent<Dropdown>().onValueChanged.AddListener(ActivityOptionChanged);
            StartCoroutine(GetActivityList());
        }



        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }

        private void ModifyActivityClick()
        {
            var text = ActivityOptions.GetComponent<Dropdown>().captionText.text;
            if (text.IndexOf("G") > -1)
            {
                UIMgr.OpenPanel("UIAddActivityPanel", UILevel.Common, new UIAddActivityPanelData()
                {
                    type = "Modify",
                    activityIndex = text
                });
                UIMgr.ClosePanel("UIActivityPanel");
            }
            else
            {
                MessageBoxV2.AddMessage("先选择互动");
            }

        }

        private void AddActivityClick()
        {
            UIMgr.OpenPanel("UIAddActivityPanel", UILevel.Common, new UIAddActivityPanelData()
            {
                type = "Add",
                activityIndex = ""
            });
            UIMgr.ClosePanel("UIActivityPanel");
        }
        private void StartClick()
        {
            
            var text = ActivityOptions.GetComponent<Dropdown>().captionText.text;
            if (text.IndexOf("G") > -1)
            {
                UIMgr.OpenPanel("UIResourcePanel", UILevel.Common, new UIResourcePanelData()
                {
                    activityIndex = text
                });
                UIMgr.ClosePanel("UIActivityPanel");
            }
            
        }

        private void DownloadNewVersion()
        {
            Application.OpenURL("https://github.com/yzqlwt/ResourcePackagingTool/releases");
        }
        private void ActivityOptionChanged(int arg0)
        {
            var activityOptions = ActivityOptions.GetComponent<Dropdown>();
            Debug.Log(string.Format("互动选择：{0}", activityOptions.captionText.text));
        }
        private void GuideToTexturePackage()
        {
            Application.OpenURL("https://imgchr.com/i/uYL7Ss");
            var command = Application.streamingAssetsPath + "/bin/TexturePackerGUI.exe";
            var argu = "";
            Utils.processCommand(command, argu);
        }
        private void RefreshList()
        {
            StartCoroutine(GetActivityList());
        }

        IEnumerator GetActivityList()
        {
            var uri = "http://www.yzqlwt.com:8080/activity/list";
            using (UnityWebRequest webRequest = UnityWebRequest.Get(uri))
            {
                // Request and wait for the desired page.
                yield return webRequest.SendWebRequest();

                if (webRequest.isNetworkError)
                {
                    Debug.Log(": Error: " + webRequest.error);
                }
                else
                {

                    var list = QF.SerializeHelper.FromJson<Dictionary<string, string>>(webRequest.downloadHandler.text);
                    ActivityOptions.GetComponent<Dropdown>().ClearOptions();
                    ActivityOptions.GetComponent<Dropdown>().AddOptions(new List<string>
                {
                    "请先选择互动"
                });

                    var Activities = list.Select((kv) =>
                    {
                        return kv.Key;
                    }).ToList();
                    ActivityOptions.GetComponent<Dropdown>().AddOptions(Activities);
                    Debug.Log(string.Format("Activity List:{0}", webRequest.downloadHandler.text));
                }
            }
        }
        IEnumerator GetNeedUpdate()
        {
            var uri = "http://www.yzqlwt.com:8080/activity/version?version=" + Version;
            using (UnityWebRequest webRequest = UnityWebRequest.Get(uri))
            {
                yield return webRequest.SendWebRequest();
                if (webRequest.isNetworkError)
                {
                    Debug.Log(": Error: " + webRequest.error);
                }
                else
                {
                    var text = webRequest.downloadHandler.text;
                    bool _b = Convert.ToBoolean(text);
                    if (_b)
                    {
                        Update.gameObject.SetActive(true);
                    }
                    else
                    {
                        Update.gameObject.SetActive(false);
                    }
                }
            }
        }
    }
}
