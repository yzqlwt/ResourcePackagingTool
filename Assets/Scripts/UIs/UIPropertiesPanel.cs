//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using QF.Master;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.UI;
    
    public class ResBlockNameChanged
    {
        public string MD5;
        public string FileName;
    }
    
    public class UIPropertiesPanelData : QFramework.UIPanelData
    {
        public Dictionary<string, string> Properties;
    }
    
    public partial class UIPropertiesPanel : QFramework.UIPanel
    {

        public Transform Item;
        public Transform Content;
        public Transform AddItemPanel;
        public Dictionary<string, string> Properties;
        public Dictionary<string, string> PropertiesTemplate;
        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIPropertiesPanelData ?? new UIPropertiesPanelData();
            // please add init code here
            Item.gameObject.SetActive(false);
            Properties = mData.Properties;
            SetProperties(mData.Properties);
            btnClose.onClick.AddListener(() =>
            {
                UIMgr.ClosePanel("UIPropertiesPanel");
            });
        }
        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }

        public void SetProperties(Dictionary<string, string> properties)
        {
            ClearProperties();
            foreach (KeyValuePair<string, string> pro in properties)
            {
                var item = GetItem();
                SetItemKeyValue(item, pro);
                item.Find("InputField").GetComponent<InputField>().onValueChanged.AddListener((tmp) =>
                {
                    OnValueChanged(tmp);
                });
            }
        }
        public void ClearProperties()
        {
            foreach (Transform child in Content)
            {
                if (child.gameObject.name == "Property")
                {
                    Destroy(child.gameObject);
                }
            }
        }
        public Transform GetItem()
        {
            var item = Instantiate(Item, Content);
            item.gameObject.SetActive(true);
            item.gameObject.name = "Property";
            var btn = item.Find("btn");
            btn.GetComponent<Button>().onClick.AddListener(() =>
            {
                ClickBtn(item);
            });


            return item;
        }

        public void AddItem()
        {
            var inputKey = AddItemPanel.Find("InputKey");
            var key = inputKey.GetComponent<InputField>().text;
            var inputValue = AddItemPanel.Find("InputValue");
            var value = inputValue.GetComponent<InputField>().text;
            
            if (key == "" || value == "")
            {
                return;
            }
            if (Properties.ContainsKey(key))
            {
                Properties[key] = value;
            }
            else
            {
                Properties.Add(key, value);
            }
            SetProperties(Properties);
            AddItemPanel.gameObject.SetActive(false);
        }

        public void SetItemKeyValue(Transform item, KeyValuePair<string, string> pro)
        {
            item.Find("Key").GetComponent<Text>().text = pro.Key;
            item.Find("InputField").GetComponent<InputField>().text = pro.Value;
            var key = pro.Key;
            item.Find("btn").gameObject.SetActive(true);
            if (key == "Name")
            {
                item.Find("btn/Text").GetComponent<Text>().text = "+";
            }
            else if (key == "MD5" || key == "Extension")
            {
                item.Find("InputField").GetComponent<InputField>().readOnly = true;
                item.Find("btn/Text").GetComponent<Text>().text = "+";
            }
            else
            {
                item.Find("btn/Text").GetComponent<Text>().text = "-";
            }
        }

        public void ClickBtn(Transform item)
        {
            var key = item.Find("Key").GetComponent<Text>().text;
            if (key == "Name" || key == "MD5" || key == "Extension")
            {
                Debug.Log("Ìí¼ÓItem");
                AddItemPanel.gameObject.SetActive(true);
            }
            else
            {
                Destroy(item.gameObject);
            }

        }
        public void OnValueChanged(string tmp)
        {
            Debug.Log("Value Changed");
            foreach (Transform child in Content)
            {
                if (child.gameObject.name == "Property")
                {
                    var key = child.Find("Key").GetComponent<Text>().text;
                    var value = child.Find("InputField").GetComponent<InputField>().text;
                    if (Properties.ContainsKey(key))
                    {
                        Properties[key] = value;
                    }
                    else
                    {
                        Properties.Add(key, value);
                    }
                    if(key == "Name")
                    {
                        TypeEventSystem.Send(new ResBlockNameChanged()
                        {
                            MD5 = Properties["MD5"],
                            FileName = Properties["Name"] + Properties["Extension"]
                        });
                    }
                }
            }
        }

        public void CloseAddItemPanel()
        {
            AddItemPanel.gameObject.SetActive(false);
        }

    }
}
