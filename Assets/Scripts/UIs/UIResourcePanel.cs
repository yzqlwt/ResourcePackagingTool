//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using QF.Master;
    using QuickTools;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.Networking;
    using UnityEngine.UI;
    
    
    public class UIResourcePanelData : QFramework.UIPanelData
    {
        public string activityIndex;
        public string id;
    }
    
    public partial class UIResourcePanel : QFramework.UIPanel
    {

        private string Version = "v1.0.1";
        public Dictionary<string, Transform> ResMap = new Dictionary<string, Transform>(); //MD5-ResBlockPrefab

        public Transform ResBlockPrefab;
        public Transform Content;

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }

        public void Test()
        {
            TypeEventSystem.Send(new FilePathInfo()
            {
                FilePath = @"C:\Users\yzqlwt\Dropbox\flash\加减法\brick.png",
                Extension = ".png",
                FileName = "brick.png",
                MD5 = "dddddddddddddddddddddd"
            });
            TypeEventSystem.Send(new FilePathInfo()
            {
                FilePath = @"C:\Users\yzqlwt\Dropbox\flash\加减法\元件 2 副本.png",
                Extension = ".png",
                FileName = "元件 2 副本.png",
                MD5 = "dddddddddddddddddddddd111"
            });
            TypeEventSystem.Send(new FilePathInfo()
            {
                FilePath = @"C:\Users\yzqlwt\Dropbox\flash\加减法\brick.png",
                Extension = ".png",
                FileName = "brick333.png",
                MD5 = "dddddddddddddddddddddd222"
            });
        }

        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIResourcePanelData ?? new UIResourcePanelData();
            // please add init code here
            var activity = mData.activityIndex;
            var id = mData.id;
            TextLabel.text = "ResArea-" + activity;
            DirTools.Version = Version;
            gameObject.AddComponent<FileDragAndDrop>();
            DirTools.ActivityIndex = activity;
            DirTools.Version = Version;
            TypeEventSystem.Register<ResBlockNameChanged>(NameChanged);
            Export.onClick.AddListener(ExportRes);
            Clear.onClick.AddListener(ClearRes);
            God.onClick.AddListener(() =>
            {
                UIMgr.OpenPanel("UIUploadPanel", UILevel.Common, new UIUploadPanelData()
                {
                    ActivityIndex = activity,
                    id = id
                }) ;    
            });
            TypeEventSystem.Register<RemoveBlock>((tmp)=> {
                var md5 = tmp.MD5;
                   
                ResMap.Remove(md5);
                string resDir = DirTools.GetTmpResDir();
                string filepath = Path.Combine(resDir, md5 + tmp.Extension);
                if (File.Exists(filepath))
                {
                    File.Delete(filepath);
                }
                else
                {
                    Debug.LogError("资源不存在！！！");
                }
            });
            TypeEventSystem.Register<SetBlockProperties>((tmp) => {
                var md5 = tmp.MD5;
                var properties = tmp.properties;
                var ResBlock = ResMap[md5];
                ResBlock.GetComponent<ResBlockScript>().Properties = properties;
            });
            TypeEventSystem.Register<ClearRescoursePanel>((tmp) => {
                ResMap.Clear();
                var lst = new List<Transform>();
                foreach (Transform child in Content)
                {
                    lst.Add(child);
                }
                for (int i = 0; i < lst.Count; i++)
                {
                    Destroy(lst[i].gameObject);

                }
                DirTools.DeleteFolder(DirTools.GetTmpResDir());
            });

            TypeEventSystem.Register<FilePathInfo>((file) =>
            {
                if (ResMap.ContainsKey(file.MD5))
                {
                    return;
                }
                else if (file.Extension == ".zip")
                {
                    MessageBoxV2.AddMessage("暂不支持拖入zip", 3);
                }
                else
                {
                    var BlockImage = Instantiate(ResBlockPrefab, Content);
                    BlockImage.GetComponent<ResBlockScript>().SetImage(file);
                    DirTools.CopyDropFileToTmpResDir(file);
                    ResMap.Add(file.MD5, BlockImage);
                }
            });
            DirTools.CleanUpDir();
            ResMap.Clear();
#if UNITY_EDITOR
            Invoke("Test", 3.0f);
#endif
        }


        public void NameChanged(ResBlockNameChanged nameChanged)
        {
            Transform tran;
            ResMap.TryGetValue(nameChanged.MD5, out tran);
            if (tran)
            {
                tran.GetComponent<ResBlockScript>().text.text = nameChanged.FileName;
            }
        }
        public List<Transform> GetResTransform()
        {
            var list = new List<Transform>();
            foreach (Transform tran in Content)
            {
                list.Add(tran);
            }
            return list;
        }

        public void ClearRes()
        {
            ResMap.Clear();
            var lst = new List<Transform>();
            foreach (Transform child in Content)
            {
                lst.Add(child);
            }
            for (int i = 0; i < lst.Count; i++)
            {
                Destroy(lst[i].gameObject);

            }
            DirTools.CleanUpDir();
        }

        public void TexturePackage()
        {
            var resDir = DirTools.GetTmpResDir();
            string[] files = System.IO.Directory.GetFiles(resDir);
            var outputDir = DirTools.GetTmpOutPutDir();

            var isOn = ToggleTexturePackage.isOn;
            if (isOn)
            {
                string name = "default";
                var command = Application.streamingAssetsPath + "/bin/TexturePacker.exe";
                var argu = string.Format(@"{0} --sheet {1}/{2}.png --data {1}/{2}.plist --allow-free-size --no-trim --max-size 2048 --format cocos2d", resDir, outputDir, name);
                Utils.processCommand(command, argu);

                // Copy the files and overwrite destination files if they already exist.
                foreach (string s in files)
                {
                    // Use static Path methods to extract only the file name from the path.
                    if (System.IO.Path.GetExtension(s) != ".png")
                    {
                        var fileName = System.IO.Path.GetFileName(s);
                        var destFile = System.IO.Path.Combine(outputDir, fileName);
                        System.IO.File.Copy(s, destFile, true);
                    }

                }
            }
            else
            {

                foreach (string s in files)
                {
                    var fileName = System.IO.Path.GetFileName(s);
                    var destFile = System.IO.Path.Combine(outputDir, fileName);
                    System.IO.File.Copy(s, destFile, true);
                }
            }
        }

        public void Compress()
        {
            var isOn = ToggleCompress.isOn;
            if (isOn)
            {
                ZipUtil.ZipDirectory(DirTools.GetTmpOutPutDir(), DirTools.GetOutPutDir() + "/ResConfig.zip", false);
            }
        }

        public void GenerateCode()
        {
            var fileName = "PackageResParser.lua";
            var luaFilePath = Application.streamingAssetsPath + "/" + fileName;
            var destFile = System.IO.Path.Combine(DirTools.GetOutPutDir(), fileName);
            System.IO.File.Copy(luaFilePath, destFile, true);
        }

        public void ExportRes()
        {
            Debug.Log("导出资源");
            Dictionary<string, Dictionary<string, string>> TotalProperties = new Dictionary<string, Dictionary<string, string>>();
            var list = GetResTransform();
            foreach (var tran in list)
            {
                var BlockImageScript = tran.GetComponent<ResBlockScript>();
                var properties = BlockImageScript.Properties;
                try
                {
                    TotalProperties.Add(properties["Name"], properties);
                }
                catch (Exception ex)
                {
                    Debug.Log(ex);
                    MessageBoxV2.AddMessage("导出失败：重复的资源名称");
                    return;
                }
            }
            var dataAsJson = QF.SerializeHelper.ToJson(TotalProperties);
            File.WriteAllText(DirTools.GetTmpOutPutDir() + "/ResConfig.json", dataAsJson);
            TexturePackage();
            Compress();
            GenerateCode();
            System.Diagnostics.Process.Start(DirTools.GetBasePathDir());
        }

        protected override void OnClose()
        {
        }


        public void setBlockProperties(string md5, Dictionary<string, string> properties)
        {

        }


    }


}
