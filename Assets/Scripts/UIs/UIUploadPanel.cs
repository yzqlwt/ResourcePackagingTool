//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using NRatel.TextureUnpacker;
    using QF.Master;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Text;
    using UnityEngine;
    using UnityEngine.Networking;
    using UnityEngine.UI;

    public class SetBlockProperties
    {
        public string MD5;
        public Dictionary<string, string> properties;
    }

    public class ClearRescoursePanel
    {

    }
    
    public class UIUploadPanelData : QFramework.UIPanelData
    {
        public string ActivityIndex;
    }
    
    public partial class UIUploadPanel : QFramework.UIPanel
    {

        private string Auth = "****";
        private string ActivityIndex = "**";

        public GameObject AttachmentPrefab;
        public Transform Content;

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIUploadPanelData ?? new UIUploadPanelData();
            // please add init code here
            ActivityIndex = mData.ActivityIndex.ToLower();
            
            Query.onClick.AddListener(() =>
            {
                var lst = new List<Transform>();
                foreach (Transform child in Content)
                {
                    lst.Add(child);
                }
                for (int i = 0; i < lst.Count; i++)
                {
                    Destroy(lst[i].gameObject);

                }
                var str = ItemIdDropdown.GetComponent<Dropdown>().captionText.text;
                if (str.IndexOf("SkinName") > -1)
                {
                    var item_id = str.Split('|')[1].Split(':')[1];
                    StartCoroutine(GetAttachments("Skin", item_id));
                }

            });
            Home.onClick.AddListener(() =>
            {
                UIMgr.ClosePanel("UIUploadPanel");
            });
            StartCoroutine(GetAuth());
            ActivityText.text = ActivityIndex;
        }



        IEnumerator GetAuth()
        {
            //var url = string.Format("http://www.yzqlwt.com:8080/activity/auth");
            //UnityWebRequest webRequest = UnityWebRequest.Get(url);
            //yield return webRequest.SendWebRequest();

            //if (webRequest.isNetworkError)
            //{
            //    Debug.Log(": Error: " + webRequest.error);
            //}
            //else
            //{
            //    Debug.Log(webRequest.downloadHandler.text);
            //    var encrypt_str = webRequest.downloadHandler.text;
            //    string keys = "z!FZXp^ahDv4J#sz";
            //    Auth = Assets.Scripts.Utils.AES.Decode(encrypt_str, keys);
            //    StartCoroutine(GetTemplateId());
            //}
            Auth = PlayerPrefs.GetString("access_token");
            yield return null;
            StartCoroutine(GetTemplateId());
        }

        IEnumerator GetAttachments(string itemType, string itemId)
        {
            var url = string.Format("https://gate.mongomath.com:8443/admin-course/item/attachment?itemType={0}&itemId={1}", itemType, itemId);
            UnityWebRequest webRequest = UnityWebRequest.Get(url);
            webRequest.SetRequestHeader("Authorization", Auth);
            webRequest.SetRequestHeader("Content-Type", "application/json");
            yield return webRequest.SendWebRequest();

            if (webRequest.isNetworkError)
            {
                Debug.Log(": Error: " + webRequest.error);
            }
            else
            {
                Debug.Log(webRequest.downloadHandler.text);
                var list = QF.SerializeHelper.FromJson<List<AttachmentsConfig>>(webRequest.downloadHandler.text);
                list.ForEach((item) =>
                {
                    item.itemId = itemId;
                    StartCoroutine(initAttachment(item));
                });
            }
        }

        IEnumerator initAttachment(AttachmentsConfig config)
        {
            var obj = Instantiate(AttachmentPrefab, Content);
            obj.transform.Find("Name").GetComponent<Text>().text = "资源名称: " + config.name;
            var uri = "";
            if (config.attachments.uri.IndexOf(".zip") > -1)
            {
                uri = "https://s2.ax1x.com/2019/10/09/u50uEn.png";
            }
            else
            {
                uri = "https://s2.ax1x.com/2019/10/09/u5DlXF.png";
            }
            WWW www = new WWW(uri);//��WWW��������ͼƬ
            yield return www;
            var image = obj.transform.Find("Image").GetComponent<Image>();
            if (www != null && string.IsNullOrEmpty(www.error))
            {
                //��ȡTexture
                Texture2D texture = www.texture;
                //��Ϊ���Ƕ������Image������������Ҫ��Texture2Dת��ΪSprite
                Sprite sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f));
                image.sprite = sprite;
            }
            var btn_repleace = obj.transform.Find("Replace").GetComponent<Button>();
            btn_repleace.onClick.AddListener(() =>
            {
                StartCoroutine(BackupConfig(config, "replace"));
            });
            var btn_download = obj.transform.Find("Download").GetComponent<Button>();
            btn_download.onClick.AddListener(() =>
            {
                var url = string.Format("http://gate-static.97kid.com/{0}", config.attachments.uri);
                Application.OpenURL(url);
            });

            var btn_restore = obj.transform.Find("Restore").GetComponent<Button>();
            btn_restore.onClick.AddListener(() =>
            {
                StartCoroutine(BackupConfig(config, "restore"));
            });
        }

        IEnumerator GetTemplateId()
        {
            var url = string.Format("https://gate.mongomath.com:8443/admin-course/activityTemplates?count={0}", 70);
            UnityWebRequest webRequest = UnityWebRequest.Get(url);
            webRequest.SetRequestHeader("Authorization", Auth);
            webRequest.SetRequestHeader("Content-Type", "application/json");
            yield return webRequest.SendWebRequest();
            if (webRequest.isNetworkError)
            {
                Debug.Log(": Error: " + webRequest.error);
            }
            else
            {
                Debug.Log(webRequest.downloadHandler.text);
                var res = webRequest.downloadHandler.text;
                if (res.IndexOf("invalid.request")>-1)
                {
                    MessageBoxV2.AddMessage("Token失效，请重新登录！！！");
                    yield return 0;
                }
                else
                {
                    var templatesConfig = QF.SerializeHelper.FromJson<Assets.Scripts.Upload.TemplatesConfig>(webRequest.downloadHandler.text);
                    var list = templatesConfig.targets;
                    var t = list.Where((data) =>
                    {
                        Debug.Log(data.game_id + ActivityIndex);
                        return data.game_id == ActivityIndex;
                    }).ToList();
                    if (t.Count() != 1)
                    {
                        Debug.LogError("��Templates��δ�ҵ�ѡ�еĻ���������");
                    }
                    else
                    {
                        var template_id = t.First().id;
                        StartCoroutine(GetItemId(template_id));
                    }
                }

            }
        }

        IEnumerator GetItemId(int template_id)
        {
            var url = string.Format("https://gate.mongomath.com:8443/admin-course/skin?templateId={0}", template_id);
            UnityWebRequest webRequest = UnityWebRequest.Get(url);
            webRequest.SetRequestHeader("Authorization", Auth);
            webRequest.SetRequestHeader("Content-Type", "application/json");
            yield return webRequest.SendWebRequest();
            if (webRequest.isNetworkError)
            {
                Debug.Log(": Error: " + webRequest.error);
            }
            else
            {
                ItemIdDropdown.GetComponent<Dropdown>().ClearOptions();
                Debug.Log(webRequest.downloadHandler.text);
                var skinsConfig = QF.SerializeHelper.FromJson<List<Assets.Scripts.Upload.SkinsConfig>>(webRequest.downloadHandler.text);
                var options = skinsConfig.Select((data, index) =>
                {
                    var str = string.Format((index+1)+" SkinName:{1}-SkinId:{2} | ItemId:{0}", data.id, data.name, data.skin_id);
                    return str;
                }).ToList();
                ItemIdDropdown.GetComponent<Dropdown>().AddOptions(new List<string>()
                {
                    "选择Skin"
                });
                ItemIdDropdown.GetComponent<Dropdown>().AddOptions(options);
                ItemIdDropdown.GetComponent<Dropdown>().AddOptions(new List<string>()
                {
                    ""
                });
            }
        }

        IEnumerator BackupConfig(AttachmentsConfig config, string type)
        {
            var url = string.Format("http://gate-static.97kid.com/{0}", config.attachments.uri);
            UnityWebRequest webRequest = UnityWebRequest.Get(url);
            yield return webRequest.SendWebRequest();
            if (webRequest.isNetworkError)
            {
                Debug.Log(": Error: " + webRequest.error);
            }
            else
            {
                DateTime date = DateTime.Now;
                var dateStr = date.ToString("yyyyMMdd-HH时mm分ss秒");
                var zipPath = DirTools.GetBackupDir()+"/"+dateStr+ "."+ config.attachments.ext_name;
                Debug.Log(zipPath);
                var data = webRequest.downloadHandler.data;
                File.WriteAllBytes(zipPath, data);
                if(type == "replace")
                {
                    StartCoroutine(UploadConfig(config));
                }
                else if(type == "restore")
                {
                    DirTools.DeleteFolder(DirTools.GetUnZipDir());
                    ZipUtil.UnZipFile(zipPath, DirTools.GetUnZipDir());
                    StartCoroutine(Unpacker(DirTools.GetUnZipDir() + "/default.plist", DirTools.GetUnZipDir() + "/default.png"));
                }
                
            }
        }
        IEnumerator Unpacker(string plistFilePath, string pngFilePath)
        {
            DirTools.DeleteFolder(DirTools.GetRestoredPNGDir());
            var loader = NRatel.TextureUnpacker.Loader.LookingForLoader(plistFilePath);
            if (loader != null)
            {
                var plist = loader.LoadPlist(plistFilePath);
                var bigTexture = loader.LoadTexture(pngFilePath, plist.metadata);

                int total = plist.frames.Count;
                int count = 0;
                foreach (var frame in plist.frames)
                {
                    try
                    {
                        Core.Restore(bigTexture, frame);
                        count += 1;
                    }
                    catch
                    {
                    }
                }
            }
            DirectoryInfo dir = new DirectoryInfo(DirTools.GetUnZipDir());
            FileInfo[] finfo = dir.GetFiles();
            for (int i = 0; i < finfo.Length; i++)
            {
                var file = finfo[i];
                if (file.Name.IndexOf("plist") > -1 || file.Name.IndexOf("png") > -1)
                {

                }
                else
                {
                    File.Copy(file.FullName, DirTools.GetRestoredPNGDir()+"/"+ file.Name, true);
                }
            }
            ImportToResPanel();
            yield return null;
        }

        public void ImportToResPanel()
        {
            //清除资源文件夹
            //清除rescoure面板
            //DirectoryInfo dir = new DirectoryInfo(DirTools.GetRestoredPNGDir());
            //FileInfo[] finfo = dir.GetFiles();

            //for (int i = 0; i < finfo.Length; i++)
            //{
            //    var file = finfo[i];
            //    var fileinfo = new FilePathInfo()
            //    {
            //        FilePath = file.FullName,
            //        FileName = file.Name,
            //        Extension = System.IO.Path.GetExtension(file.Name),
            //        MD5 = System.IO.Path.GetFileNameWithoutExtension(file.Name)

            //    };
            //    DirTools.CopyDropFileToTmpResDir(fileinfo);
            //}
            TypeEventSystem.Send(new ClearRescoursePanel());
            StreamReader sr = new StreamReader(DirTools.GetRestoredPNGDir() + "/ResConfig.json");
            if (sr == null)
            {
                return;
            }
            string json = sr.ReadToEnd();
            var dict = QF.SerializeHelper.FromJson<Dictionary<string, Dictionary<string, string>>>(json);
            foreach (KeyValuePair<string, Dictionary<string, string>> kv in dict)
            {
                var properties = kv.Value;
                var Name = properties["Name"];
                var MD5 = properties["MD5"];
                var Extension = properties["Extension"];
                var fileinfo = new FilePathInfo()
                {
                    FilePath = DirTools.GetRestoredPNGDir()+"/"+MD5+ Extension,
                    FileName = Name + Extension,
                    Extension = Extension,
                    MD5 = MD5
                };
                TypeEventSystem.Send(fileinfo);
                TypeEventSystem.Send(new SetBlockProperties()
                {
                    MD5 = MD5,
                    properties = properties
                });
            }

        }

        IEnumerator UploadConfig(AttachmentsConfig config)
        {


            var filePath = DirTools.GetOutPutDir() + "/ResConfig.zip";
            FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read);
            byte[] bytes = new byte[fs.Length];
            fs.Read(bytes, 0, (int)fs.Length);
            WWWForm form = new WWWForm();
            form.AddBinaryData("file", bytes, "ResConfig.zip");
            var webRequest = UnityWebRequest.Post("https://gate.mongomath.com:8443/admin-course/asset/uploadSingle", form);
            webRequest.SetRequestHeader("Authorization", Auth);
            //webRequest.SetRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            yield return webRequest.SendWebRequest();
            if (webRequest.isNetworkError)
            {
                Debug.Log(": Error: " + webRequest.error);
            }
            else
            {
                Debug.Log(webRequest.downloadHandler.text);
                var dict = QF.SerializeHelper.FromJson<Dictionary<string, string>>(webRequest.downloadHandler.text);
                var attachment_id = dict["id"];
                Debug.Log("上传成功" + attachment_id);
                StartCoroutine(UpdateAttachment(config, attachment_id));
            }
        }

        IEnumerator UpdateAttachment(AttachmentsConfig config, string attachment_id)
        {
            var dict = new Dictionary<string, string>();
            dict["id"] = config.id+"";
            dict["itemType"] = "Skin";
            dict["itemId"] = config.itemId;
            dict["name"] = config.name;
            dict["attachmentId"] = attachment_id;
            var argu = QF.SerializeHelper.ToJson<Dictionary<string, string>>(dict);
            var webRequest = UnityWebRequest.Put("https://gate.mongomath.com:8443/admin-course/item/attachment/"+ config.id, argu);
            webRequest.SetRequestHeader("Authorization", Auth);
            webRequest.SetRequestHeader("Content-Type", "application/json");
            yield return webRequest.SendWebRequest();
            if (webRequest.isNetworkError)
            {
                Debug.Log(": Error: " + webRequest.error);
            }
            else
            {
                Debug.Log(webRequest.downloadHandler.text);
                var ret = QF.SerializeHelper.FromJson<Dictionary<string, bool>>(webRequest.downloadHandler.text);
                var isSuccess = ret["updated"];
                if (isSuccess)
                {
                    MessageBoxV2.AddMessage("更新资源成功",4);
                }
            }
        }

        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }
    }
}
